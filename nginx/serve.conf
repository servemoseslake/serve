
upstream django {
    server 127.0.0.1:8081;
}

server {
    listen 443;

    set $backend "serve-app.s3-website-us-west-2.amazonaws.com";
    set $bucket "serve-app";

    location /static {
        limit_except GET {
            deny all;
        }

        # cookies are useless on these static, public resources
        proxy_ignore_headers set-cookie;
        proxy_hide_header set-cookie;
        proxy_set_header cookie "";
  
        # avoid passing along amazon headers
        # http://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonResponseHeaders.html
        proxy_hide_header x-amz-delete-marker;
        proxy_hide_header x-amz-id-2;
        proxy_hide_header x-amz-request-id;
        proxy_hide_header x-amz-version-id;

        # only rely on last-modified (which will never change)
        proxy_hide_header etag;

        # s3 replies with 403 if an object is inaccessible; essentially not found
        proxy_intercept_errors on;
        error_page 403 =404 /_error/http-404.html;

        # go get it from s3
        proxy_pass https://$backend/$bucket$1;

        # annotate response about when it was originally retrieved
        add_header x-cache '$upstream_cache_status $upstream_http_date';
  
        # heavily cache results downstream
        expires max;
    }

    location / {
        include         uwsgi_params;
        uwsgi_pass      django;
    }

    ssl on;
    ssl_certificate /etc/nginx/ssl/certs/server.crt;
    ssl_certificate_key /etc/nginx/ssl/certs/server.key;
}
